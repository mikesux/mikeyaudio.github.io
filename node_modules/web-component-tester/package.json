{
  "name": "web-component-tester",
  "version": "2.0.5",
  "description": "web-component-tester makes testing your web components a breeze!",
  "keywords": [
    "browser",
    "grunt",
    "gruntplugin",
    "gulp",
    "polymer",
    "test",
    "testing",
    "web component",
    "web"
  ],
  "homepage": "https://github.com/Polymer/web-component-tester",
  "bugs": {
    "url": "https://github.com/Polymer/web-component-tester/issues"
  },
  "license": {
    "type": "BSD-3-Clause",
    "url": "http://polymer.github.io/LICENSE.txt"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Polymer/web-component-tester.git"
  },
  "main": "runner.js",
  "bin": {
    "wct": "./bin/wct",
    "wct-st": "./bin/wct-st"
  },
  "scripts": {
    "postinstall": "node scripts/postinstall.js",
    "test": "gulp test"
  },
  "dependencies": {
    "async": "^0.9.0",
    "chalk": "^0.5.1",
    "event-stream": "^3.1.7",
    "express": "^4.8.5",
    "findup-sync": "^0.1.3",
    "freeport": "^1.0.3",
    "glob": "^4.0.6",
    "http": "0.0.0",
    "launchpad": "^0.4.3",
    "lodash": "^2.4.1",
    "resolve": "^1.0.0",
    "sauce-connect-launcher": "^0.9.3",
    "selenium-standalone": "^2.43.1-5",
    "send": "^0.10.1",
    "serve-static": "^1.5.3",
    "socket.io": "^1.0.6",
    "stacky": "^1.2.0",
    "temp": "^0.8.1",
    "update-notifier": "^0.2.2",
    "uuid": "^2.0.1",
    "wd": "^0.3.8",
    "which": "^1.0.5",
    "yargs": "^1.3.1"
  },
  "devDependencies": {
    "chai": "^1.9.2",
    "grunt": "^0.4.5",
    "gulp": "^3.8.8",
    "gulp-concat": "^2.4.0",
    "gulp-if": "^1.2.4",
    "gulp-jshint": "^1.8.5",
    "gulp-mocha": "^1.1.1",
    "gulp-notify": "^2.0.1",
    "gulp-plumber": "^0.6.5",
    "gulp-sourcemaps": "^1.1.5",
    "gulp-watch": "^1.0.3",
    "gulp-wrap": "^0.5.0",
    "jshint-stylish": "^1.0.0",
    "lazypipe": "^0.2.2",
    "mocha": "^2.0.1",
    "orchestrator": "^0.3.7",
    "run-sequence": "^1.0.1",
    "sinon": "^1.11.1",
    "sinon-chai": "^2.6.0"
  },
  "readme": "[![NPM version](http://img.shields.io/npm/v/web-component-tester.svg)](https://npmjs.org/package/web-component-tester)\n[![Build Status](http://img.shields.io/travis/Polymer/web-component-tester.svg)](https://travis-ci.org/Polymer/web-component-tester)\n\n`web-component-tester` makes testing your web components a breeze!\n\nYou get a browser-based testing environment, configured out of the box with:\n\n* [Mocha][mocha] as a test framework.\n* [Chai][chai] assertions.\n* [Async][async] to keep your sanity.\n* [Lodash][lodash] (3.0) to repeat fewer things.\n* [Sinon][sinon] and [sinon-chai][sinon-chai] to test just your things.\n\nWCT will [run your tests](#running-your-tests) against whatever browsers you have locally installed, or remotely via Sauce Labs.\n\n\n# Getting Started\n\n## `.html` Suites\n\nYour test suites can be `.html` documents. For example,\n`test/awesomest-tests.html`:\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"../../webcomponentsjs/webcomponents.min.js\"></script>\n  <script src=\"../../web-component-tester/browser.js\"></script>\n  <link rel=\"import\" href=\"../awesome-element.html\">\n</head>\n<body>\n  <awesome-element id=\"fixture\"></awesome-element>\n  <script>\n    suite('<awesome-element>', function() {\n      test('is awesomest', function() {\n        assert.isTrue(document.getElementById('fixture').awesomest);\n      });\n    });\n  </script>\n</body>\n</html>\n```\n\n\n## `.js` Suites\n\nOr, you can write tests in separate `.js` sources, which run in the context of\nyour text index. For example, `test/awesome-tests.js`:.\n\n```js\nsuite('AwesomeLib', function() {\n  test('is awesome', function() {\n    assert.isTrue(AwesomeLib.awesome);\n  });\n});\n```\n\n\n## Running Your Tests\n\n### `wct`\n\nThe easiest way to run your tests is via the `wct` command line tool. Install\nit globally via:\n\n```sh\nnpm install -g web-component-tester\n```\n\nMake sure that you also have [Java][java] installed and available on your\n`PATH`.\n\nThe `wct` tool will run your tests in all the browsers you have installed. Just\nrun it:\n\n```sh\nwct\n```\n\nBy default, any tests under `test/` will be run. You can run particular files\n(or globs of files) via `wct path/to/files`.\n\n\n\n### Web Server\n\nAlternatively, you can run your tests directly by hosting them via a web server\n(sorry, `file://` is not supported). You'll need to save WCT's `browser.js` in\norder to go this route. The recommended approach is to depend on WCT via Bower:\n\n```sh\nbower install Polymer/web-component-tester --save\n```\n\n#### Nested Suites\n\nTo help support this case, you can also directly define an index that will load\nany desired tests:\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <script src=\"../../webcomponentsjs/webcomponents.min.js\"></script>\n    <script src=\"../../web-component-tester/browser.js\"></script>\n    <script src=\"../awesome.js\"></script>\n  </head>\n  <body>\n    <script>\n      WCT.loadSuites([\n        'awesome-tests.js',\n        'awesomest-tests.html',\n      ]);\n    </script>\n  </body>\n</html>\n```\n\n\n# Configuration\n\nThe `wct` command line tool will pick up custom configuration from a\n`wct.conf.js` file located in the root of your project. It should export the \ncustom configuration:\n\n```js\nmodule.exports = {\n  verbose: true,\n  sauce: {\n    username 'boo',\n  },\n};\n```\n\nSee [`runner/config.js`](runner/config.js) for the canonical reference of \nconfiguration properties.\n\nYou can also specify global defaults (such as `sauce.username`, etc) via a\nconfig file located at `~/wct.conf.js`.\n\n\n# Nitty Gritty\n\n## Mocha\n\nWCT supports Mocha's [TDD][mocha-tdd] (`suite`/`test`/etc) and [BDD][mocha-bdd]\n(`describe`/`it`/etc) interfaces, and will call `mocha.setup`/`mocha.run` for \nyou. Just write your tests, and you're set.\n\n\n## Chai\n\nSimilarly, Chai's [`expect`][chai-bdd] and [`assert`][chai-tdd] interfaces are \nexposed for your convenience.\n\n\n## Command Line\n\nThe `wct` tool, and the [gulp](#gulp) and [grunt](#grunt) integration, support\nseveral command line flags:\n\n\n`--remote`: Uses the [default remote browsers](default-sauce-browsers.json), \nand if omitted uses the default local browsers.\n\nNote that you will need a [valid Sauce Labs account](opensauce) for this. Let\nWCT know your credentials via envrionment variables:\n\n```sh\nexport SAUCE_USERNAME=username\nexport SAUCE_ACCESS_KEY=abcdef01-abcd-abcd-abcd-abcdef012345\n```\n\n\n`--browsers BROWSER,BROWSER`: Override the browsers that will be run. Browsers\ncan be specified via local names such as `chrome`, `canary`, `firefox`,\n`aurora`, `ie`, etc. Remote browsers can be specified via\n`<PLATFORM>/<BROWSER>[@<VERSION>]`.\n\n\n`--persistent`: Doesn't close the browsers after their first run. Refresh the\nbrowser windows to re-run tests.\n\n\n## Custom Environments\n\nIf you would rather not load WCT's shared environment (everything but Mocha is\noptional), you've got a couple options: Set the `WCTSkipEnvironment = true` before loading `browser.js`. Or...\n\n```html\n<script src=\"../../web-component-tester/browser.js?skipEnv\"></script>\n```\n\n\n## Gulp\n\nWe also provide Gulp tasks for your use. `gulpfile.js`:\n\n```js\nvar gulp = require('gulp');\nrequire('web-component-tester').gulp.init(gulp);\n```\n\nExposes `gulp test:local` and `gulp test:remote`.\n\n\n## Grunt\n\nOr, Grunt tasks, if you prefer. `gruntfile.js`:\n\n```js\ngrunt.initConfig({\n  'wct-test': {\n    local: {\n      options: {remote: false},\n    },\n    remote: {\n      options: {remote: true},\n    },\n    chrome: {\n      options: {browsers: ['chrome']},\n    },\n  },\n});\n\ngrunt.loadNpmTasks('web-component-tester');\n```\n\nGives you two grunt tasks: `wct-test:local` and `wct-test:remote`. The \n`options` you can use are specified in [`runner/config.js`](runner/config.js).\n\n\n<!-- References -->\n[async]:      https://github.com/caolan/async       \"Async.js\"\n[chai-bdd]:   http://chaijs.com/api/bdd/            \"Chai's BDD Interface\"\n[chai-tdd]:   http://chaijs.com/api/assert/         \"Chai's TDD Interface\"\n[chai]:       http://chaijs.com/                    \"Chai Assertion Library\"\n[java]:       https://java.com/download             \"Java\"\n[mocha-bdd]:  http://mochajs.org/#bdd-interface     \"Mocha's BDD Interface\"\n[mocha-tdd]:  http://mochajs.org/#tdd-interface     \"Mocha's TDD Interface\"\n[mocha]:      http://mochajs.org/                   \"Mocha Test Framework\"\n[sauce]:      http://saucelabs.com                  \"Sauce Labs\"\n[opensauce]:  https://saucelabs.com/opensauce       \"Open Sauce Testing\"\n[lodash]:     https://lodash.com/                   \"Lo-Dash\"\n[sinon]:      http://sinonjs.org/                   \"Sinon.JS\"\n[sinon-chai]: https://github.com/domenic/sinon-chai \"Chai assertions for Sinon\"\n",
  "readmeFilename": "README.md",
  "_id": "web-component-tester@2.0.5",
  "_shasum": "a00ea69d28d53185fab02487c0ee1aeb00254d4b",
  "_from": "web-component-tester@>=2.0.3 <3.0.0",
  "_resolved": "https://registry.npmjs.org/web-component-tester/-/web-component-tester-2.0.5.tgz"
}
