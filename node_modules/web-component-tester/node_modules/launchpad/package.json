{
  "name": "launchpad",
  "description": "You can launch browsers! From NodeJS! Local ones! Remote ones! Browserstack ones!",
  "version": "0.4.4",
  "homepage": "https://github.com/ekryski/launchpad",
  "author": {
    "name": "Eric Kryski",
    "email": "e.kryski@gmail.com",
    "url": "http://erickryski.com"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:ekryski/launchpad.git"
  },
  "contributors": [
    {
      "name": "David Luecke",
      "email": "daff@neyeon.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "main": "lib/index.js",
  "engines": {
    "node": "~0.10"
  },
  "scripts": {
    "test": "grunt test --stack"
  },
  "devDependencies": {
    "expect.js": "~0.1.2",
    "grunt": "~0.4.1",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-release": "~0.5.1",
    "grunt-simple-mocha": "~0.4.0",
    "mocha": "~1.6.0",
    "useragent": "~2.0.7"
  },
  "dependencies": {
    "async": "^0.1.20",
    "browserstack": "^1.1.0",
    "debug": "^2.1.0",
    "plist": "~0.4.0",
    "q": "^1.0.1",
    "restify": "^1.4.4",
    "underscore": "^1.4.0"
  },
  "keywords": [
    "browsers",
    "launcher",
    "chrome",
    "ie",
    "firefox",
    "opera",
    "phantomjs",
    "browserstack"
  ],
  "readme": "# Launchpad\nTouched\n[![Build Status](https://travis-ci.org/ekryski/launchpad.svg)](https://travis-ci.org/ekryski/launchpad)\n\nYou can launch browsers! With NodeJS!\n\n* __Local browsers__ for MacOS, Windows and Linux (like) operating systems\n* __[BrowserStack](http://browserstack.com)__ browsers using the BrowserStack API\n* __Remote browsers__ using the launchpad server\n\n## API\n\nThe general API for any launcher (`<type>`) looks like this:\n\n```js\nvar launch = require('launchpad');\nlaunch.<type>(configuration, function(error, launcher) {\n  launcher.browsers(function(error, browsers) {\n    // -> List of available browsers with version\n  });\n\n  launcher(url, configuration, function(error, instance) {\n    instance // -> A browser instance\n    instance.id // -> unique instance id\n    instance.stop(callback) // -> Stop the instance\n    instance.status(callback) // -> Get status information about the instance\n  });\n\n  launcher.<browsername>(url, function(error, instance) {\n    // Same as above\n  });\n});\n```\n\n## Local launchers\n\nLocal launchers look up all currently installed browsers and allow you to start new browser processes.\n\n```js\n// Launch a local browser\nlaunch.local(function(err, local) {\n  launcher.browsers(function(error, browsers) {\n    // -> List of all browsers found locally with version\n  });\n  \n  local.firefox('http://url', function(err, instance) {\n    // An instance is an event emitter\n    instance.on('stop', function() {\n      console.log('Terminated local firefox');\n    });\n  });\n});\n```\n\n## Browserstack\n\nBrowserStack is a great cross-browser testing tool and offers API access to any account that is on a monthly plan.\nLaunchpad allows you to start BrowserStack workers through its API like this:\n\n```js\nlaunch.browserstack({\n    username : 'user',\n    password : 'password'\n  },\n  function(err, browserstack) {\n    launcher.browsers(function(error, browsers) {\n      // -> List of all Browserstack browsers\n    });\n    \n    browserstack.ie('http://url', function(err, instance) {\n      // Shut the instance down after 5 seconds\n      setTimeout(function() {\n        instance.stop(function (err) {\n          if(err) {\n            console.log(err);\n          }\n          console.log('Browser instance has stopped');\n        });\n      }, 5000);\n  });\n});\n```\n\nBehind the scenes we have the [node-browserstack](https://github.com/scottgonzalez/node-browserstack)\nmodule do all the work (API calls) for us.\n\n## Remote systems\n\nLaunchpad also allows you to start browsers on other systems that are running the Launchpad server.\n\n### The launchpad server\n\nThe launchpad server is a simple implementation of the [BrowserStack API (Version 1)](https://github.com/browserstack/api)\nwhich provides a RESTful interface to start and stop browsers. You can set up a Launchpad server like this:\n\n```js\nlaunch.server({\n  username : 'launcher',\n  password : 'testing'\n}).listen(8080, function () {\n  console.log('Listeining...');\n});\n```\n\n### Launching remote servers\n\nBecause the Launchpad server is compatible with the BrowserStack API (Version 1), you could basically use\nany BrowserStack API client, connect to the server and start browsers.\n\nThe included remote launcher does exactly that by wrapping BrowserStack launcher and pointing it to\nthe given host:\n\n```js\nlaunch.remote({\n  host : 'ie7machine',\n  username : 'launcher',\n  password : 'testing'\n}, function(err, api) {\n  launcher.browsers(function(error, browsers) {\n    // -> List of all browsers found on ie7machine\n  });\n  \n  api('http://github.com', {\n    browser : 'safari',\n    version : 'latest'\n  }, function(err, instance) {\n  });\n});\n```\n\n## Changelog\n\n__0.4.0__\n\n- Output PhantomJS errors and console.logs ([#35](https://github.com/ekryski/launchpad/pull/35))\n- Node Webkit support for MacOS and Windows ([#30](https://github.com/ekryski/launchpad/pull/30), [#34](https://github.com/ekryski/launchpad/pull/34))\n- Allow browsers to start multiple times even if they are already running ([#33](https://github.com/ekryski/launchpad/pull/33))\n- Fix Windows path and add JSHint ([#32](https://github.com/ekryski/launchpad/pull/32))\n- Expose `path` and `binPath` for detected browsers ([#31](https://github.com/ekryski/launchpad/pull/31))\n\n__0.3.0__\n\n- Major internal refactoring ([#25](https://github.com/ekryski/launchpad/pull/25))\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ekryski/launchpad/issues"
  },
  "_id": "launchpad@0.4.4",
  "_shasum": "7db568a66a67b492902577d904d9263d1469423c",
  "_from": "launchpad@>=0.4.3 <0.5.0",
  "_resolved": "https://registry.npmjs.org/launchpad/-/launchpad-0.4.4.tgz"
}
